
ButtonFlashACX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000630  000006c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000839  00800220  00800220  000006e4  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000788  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016f5  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f45  00000000  00000000  00001f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000baa  00000000  00000000  00002e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00003a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000897  00000000  00000000  00003bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062e  00000000  00000000  00004463  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004a91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c2       	rjmp	.+1202   	; 0x508 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e3       	ldi	r30, 0x30	; 48
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 35       	cpi	r26, 0x59	; 89
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	f4 d0       	rcall	.+488    	; 0x308 <main>
 120:	85 c2       	rjmp	.+1290   	; 0x62c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <x_thread_id>
 14c:	30 91 58 0a 	lds	r19, 0x0A58	; 0x800a58 <x_thread_mask>
 150:	f8 94       	cli
 152:	ed b6       	in	r14, 0x3d	; 61
 154:	fe b6       	in	r15, 0x3e	; 62
 156:	78 94       	sei
 158:	e6 e2       	ldi	r30, 0x26	; 38
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	22 0f       	add	r18, r18
 15e:	c0 e1       	ldi	r28, 0x10	; 16
 160:	d2 e0       	ldi	r29, 0x02	; 2
 162:	c2 0f       	add	r28, r18
 164:	d1 1d       	adc	r29, r1
 166:	19 91       	ld	r17, Y+
 168:	d8 81       	ld	r29, Y
 16a:	c1 2f       	mov	r28, r17
 16c:	18 81       	ld	r17, Y
 16e:	1a 3a       	cpi	r17, 0xAA	; 170
 170:	21 f0       	breq	.+8      	; 0x17a <x_yield+0x56>
 172:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <x_thread_id>
 176:	91 2d       	mov	r25, r1
 178:	20 c2       	rjmp	.+1088   	; 0x5ba <x_stack_overflow>
 17a:	22 0f       	add	r18, r18
 17c:	e2 0f       	add	r30, r18
 17e:	f1 1d       	adc	r31, r1
 180:	e1 92       	st	Z+, r14
 182:	f0 82       	st	Z, r15

00000184 <x_schedule>:
 184:	20 91 57 0a 	lds	r18, 0x0A57	; 0x800a57 <x_disable_status>
 188:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <x_delay_status>
 18c:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <x_suspend_status>
 190:	23 2b       	or	r18, r19
 192:	24 2b       	or	r18, r20
 194:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <x_thread_id>
 198:	40 91 58 0a 	lds	r20, 0x0A58	; 0x800a58 <x_thread_mask>
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	88 94       	clc
 1a0:	33 95       	inc	r19
 1a2:	37 70       	andi	r19, 0x07	; 7
 1a4:	44 1f       	adc	r20, r20
 1a6:	41 1d       	adc	r20, r1
 1a8:	74 2f       	mov	r23, r20
 1aa:	42 23       	and	r20, r18
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <restore>
 1ae:	6a 95       	dec	r22
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <x_schedule+0x1c>
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <x_schedule>

000001b4 <restore>:
 1b4:	30 93 24 02 	sts	0x0224, r19	; 0x800224 <x_thread_id>
 1b8:	70 93 58 0a 	sts	0x0A58, r23	; 0x800a58 <x_thread_mask>
 1bc:	e6 e2       	ldi	r30, 0x26	; 38
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	e3 0f       	add	r30, r19
 1c6:	f1 1d       	adc	r31, r1
 1c8:	21 91       	ld	r18, Z+
 1ca:	30 81       	ld	r19, Z
 1cc:	f8 94       	cli
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	3e bf       	out	0x3e, r19	; 62
 1d2:	78 94       	sei
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	85 2d       	mov	r24, r5
 1f4:	4f 90       	pop	r4
 1f6:	94 2d       	mov	r25, r4
 1f8:	3f 90       	pop	r3
 1fa:	63 2d       	mov	r22, r3
 1fc:	2f 90       	pop	r2
 1fe:	72 2d       	mov	r23, r2
 200:	08 95       	ret

00000202 <bit2mask8>:
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	84 91       	lpm	r24, Z
 20c:	08 95       	ret

0000020e <bitmask8_table>:
 20e:	01 02       	muls	r16, r17
 210:	04 08       	sbc	r0, r4
 212:	10 20       	and	r1, r0
 214:	40 80       	ld	r4, Z

00000216 <buttonListener>:
		x_yield();
	}
}

void buttonListener() {
	DDRF &= 0x00;
 216:	80 b3       	in	r24, 0x10	; 16
 218:	10 ba       	out	0x10, r1	; 16
	PORTF |= 0x03;
 21a:	81 b3       	in	r24, 0x11	; 17
 21c:	83 60       	ori	r24, 0x03	; 3
 21e:	81 bb       	out	0x11, r24	; 17
	{
		// run thread main
		//listen for button press
		   //while(button not released);
		while(((PINF & 1) != 0) || ((PINF & 2) != 0));
		button = (PINF & 1) == 0 ? 0 : 1;
 220:	c1 e0       	ldi	r28, 0x01	; 1
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		// run thread main
		//listen for button press
		   //while(button not released);
		while(((PINF & 1) != 0) || ((PINF & 2) != 0));
 228:	78 99       	sbic	0x0f, 0	; 15
 22a:	fe cf       	rjmp	.-4      	; 0x228 <buttonListener+0x12>
 22c:	79 99       	sbic	0x0f, 1	; 15
 22e:	fc cf       	rjmp	.-8      	; 0x228 <buttonListener+0x12>
		button = (PINF & 1) == 0 ? 0 : 1;
 230:	8f b1       	in	r24, 0x0f	; 15
 232:	3c 2f       	mov	r19, r28
 234:	2d 2f       	mov	r18, r29
 236:	48 2f       	mov	r20, r24
 238:	41 70       	andi	r20, 0x01	; 1
 23a:	80 fd       	sbrc	r24, 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <buttonListener+0x2c>
 23e:	30 2f       	mov	r19, r16
 240:	21 2f       	mov	r18, r17
 242:	83 2f       	mov	r24, r19
 244:	92 2f       	mov	r25, r18
		
		if(button) {
 246:	44 23       	and	r20, r20
 248:	11 f0       	breq	.+4      	; 0x24e <buttonListener+0x38>
			while((PINF & 2) != 1);
 24a:	8f b1       	in	r24, 0x0f	; 15
 24c:	fe cf       	rjmp	.-4      	; 0x24a <buttonListener+0x34>
			//button 2 released
		} else {
			while((PINF & 1) != 1);
 24e:	78 9b       	sbis	0x0f, 0	; 15
 250:	fe cf       	rjmp	.-4      	; 0x24e <buttonListener+0x38>
			//button 1 released
		}
		state = stateTable[button][state];
 252:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <state>
 256:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <state+0x1>
 25a:	9c 01       	movw	r18, r24
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	82 0f       	add	r24, r18
 262:	93 1f       	adc	r25, r19
 264:	8e 0f       	add	r24, r30
 266:	9f 1f       	adc	r25, r31
 268:	fc 01       	movw	r30, r24
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ec 5f       	subi	r30, 0xFC	; 252
 270:	fd 4f       	sbci	r31, 0xFD	; 253
 272:	80 81       	ld	r24, Z
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 27a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>
		changed = 1;
 27e:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <__data_start+0x1>
 282:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__data_start>
		x_yield();
 286:	4e df       	rcall	.-356    	; 0x124 <x_yield>
	}
 288:	cf cf       	rjmp	.-98     	; 0x228 <buttonListener+0x12>

0000028a <rotateThread>:
}

void rotateThread() {
	DDRK |= 0x0f;
 28a:	e7 e0       	ldi	r30, 0x07	; 7
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	80 81       	ld	r24, Z
 290:	8f 60       	ori	r24, 0x0F	; 15
 292:	80 83       	st	Z, r24
	while(1)
	{		
		// run thread main
		PORTK |= 0x1;
 294:	c8 e0       	ldi	r28, 0x08	; 8
 296:	d1 e0       	ldi	r29, 0x01	; 1
 298:	88 81       	ld	r24, Y
 29a:	81 60       	ori	r24, 0x01	; 1
 29c:	88 83       	st	Y, r24
		x_delay(1000);
 29e:	88 ee       	ldi	r24, 0xE8	; 232
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	1c d1       	rcall	.+568    	; 0x4dc <x_delay>
		PORTK &= 0xf0;
 2a4:	88 81       	ld	r24, Y
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	88 83       	st	Y, r24
		
		PORTK |= 0x2;
 2aa:	88 81       	ld	r24, Y
 2ac:	82 60       	ori	r24, 0x02	; 2
 2ae:	88 83       	st	Y, r24
		x_delay(1000);
 2b0:	88 ee       	ldi	r24, 0xE8	; 232
 2b2:	93 e0       	ldi	r25, 0x03	; 3
 2b4:	13 d1       	rcall	.+550    	; 0x4dc <x_delay>
		PORTK &= 0xf0;
 2b6:	88 81       	ld	r24, Y
 2b8:	80 7f       	andi	r24, 0xF0	; 240
 2ba:	88 83       	st	Y, r24
		
		PORTK |= 0x4;
 2bc:	88 81       	ld	r24, Y
 2be:	84 60       	ori	r24, 0x04	; 4
 2c0:	88 83       	st	Y, r24
		x_delay(1000);
 2c2:	88 ee       	ldi	r24, 0xE8	; 232
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	0a d1       	rcall	.+532    	; 0x4dc <x_delay>
		PORTK &= 0xf0;
 2c8:	88 81       	ld	r24, Y
 2ca:	80 7f       	andi	r24, 0xF0	; 240
 2cc:	88 83       	st	Y, r24
		
		PORTK |= 0x8;
 2ce:	88 81       	ld	r24, Y
 2d0:	88 60       	ori	r24, 0x08	; 8
		x_delay(1000);
 2d2:	88 83       	st	Y, r24
 2d4:	88 ee       	ldi	r24, 0xE8	; 232
 2d6:	93 e0       	ldi	r25, 0x03	; 3
 2d8:	01 d1       	rcall	.+514    	; 0x4dc <x_delay>
		PORTK &= 0xf0;
 2da:	88 81       	ld	r24, Y
 2dc:	80 7f       	andi	r24, 0xF0	; 240
 2de:	88 83       	st	Y, r24
 2e0:	db cf       	rjmp	.-74     	; 0x298 <rotateThread+0xe>

000002e2 <flashThread>:
	}
}
void flashThread() {
	DDRK |= 0x0f;
 2e2:	e7 e0       	ldi	r30, 0x07	; 7
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	80 81       	ld	r24, Z
 2e8:	8f 60       	ori	r24, 0x0F	; 15
 2ea:	80 83       	st	Z, r24
	while(1)
	{		
		// run thread main
		PORTK |= 0x0f;  //turn lights on
 2ec:	c8 e0       	ldi	r28, 0x08	; 8
 2ee:	d1 e0       	ldi	r29, 0x01	; 1
 2f0:	88 81       	ld	r24, Y
 2f2:	8f 60       	ori	r24, 0x0F	; 15
 2f4:	88 83       	st	Y, r24
		x_delay(200);	
 2f6:	88 ec       	ldi	r24, 0xC8	; 200
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	f0 d0       	rcall	.+480    	; 0x4dc <x_delay>
		PORTK &= 0x00;  //turn lights off
 2fc:	88 81       	ld	r24, Y
 2fe:	18 82       	st	Y, r1
		x_delay(1000);	
 300:	88 ee       	ldi	r24, 0xE8	; 232
 302:	93 e0       	ldi	r25, 0x03	; 3
 304:	eb d0       	rcall	.+470    	; 0x4dc <x_delay>
 306:	f4 cf       	rjmp	.-24     	; 0x2f0 <flashThread+0xe>

00000308 <main>:
volatile int state = ROTATE;
volatile int changed = 1;

int main(void)
{
	DDRK = 0x0f; // bits 0-3 are output
 308:	8f e0       	ldi	r24, 0x0F	; 15
 30a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	PORTK = 0x00;  // clear to zero
 30e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	DDRF = 0x0; // bits 0-1 are input from buttons
 312:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x03; // input bits set to 1 as the start state
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	81 bb       	out	0x11, r24	; 17
	
	// after calling x_init(), the running thread is "thread 0"
	x_init();
 318:	6a d0       	rcall	.+212    	; 0x3ee <x_init>
	x_new(1, buttonListener, true);
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	6b e0       	ldi	r22, 0x0B	; 11
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	27 d0       	rcall	.+78     	; 0x372 <x_new>
	
	// We are thread 0 now
	//x_suspend(ROTATE);
	//x_suspend(FLASH);
	DDRB |= 0x80;
 324:	27 9a       	sbi	0x04, 7	; 4
	
	while (1)
	{	
		if(changed) {
 326:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 32a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 32e:	89 2b       	or	r24, r25
 330:	d1 f0       	breq	.+52     	; 0x366 <main+0x5e>
			switch(state){
 332:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 336:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	91 05       	cpc	r25, r1
 33e:	41 f0       	breq	.+16     	; 0x350 <main+0x48>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	91 05       	cpc	r25, r1
 344:	59 f0       	breq	.+22     	; 0x35c <main+0x54>
 346:	01 97       	sbiw	r24, 0x01	; 1
				case OFF:
				x_suspend(LIGHTS);
 348:	71 f4       	brne	.+28     	; 0x366 <main+0x5e>
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	29 d1       	rcall	.+594    	; 0x5a0 <x_suspend>
				break;
 34e:	0b c0       	rjmp	.+22     	; 0x366 <main+0x5e>
			case ROTATE:
				x_new(LIGHTS, rotateThread, true);
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	65 e4       	ldi	r22, 0x45	; 69
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0c d0       	rcall	.+24     	; 0x372 <x_new>
				break;
 35a:	05 c0       	rjmp	.+10     	; 0x366 <main+0x5e>
			case FLASH:
				x_new(LIGHTS, flashThread, true);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	61 e7       	ldi	r22, 0x71	; 113
 360:	71 e0       	ldi	r23, 0x01	; 1
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	06 d0       	rcall	.+12     	; 0x372 <x_new>
				break;
			}
		}
		changed = 0;
 366:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_start+0x1>
 36a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
		x_yield();
 36e:	da de       	rcall	.-588    	; 0x124 <x_yield>
 370:	da cf       	rjmp	.-76     	; 0x326 <main+0x1e>

00000372 <x_new>:
	}
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	c8 2f       	mov	r28, r24
 378:	d4 2f       	mov	r29, r20
 37a:	e8 2f       	mov	r30, r24
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	9f 01       	movw	r18, r30
 388:	2a 5d       	subi	r18, 0xDA	; 218
 38a:	3d 4f       	sbci	r19, 0xFD	; 253
 38c:	f9 01       	movw	r30, r18
 38e:	a2 81       	ldd	r26, Z+2	; 0x02
 390:	b3 81       	ldd	r27, Z+3	; 0x03
 392:	6c 93       	st	X, r22
 394:	cd 01       	movw	r24, r26
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	fc 01       	movw	r30, r24
 39a:	70 83       	st	Z, r23
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	fc 01       	movw	r30, r24
 3a0:	10 82       	st	Z, r1
 3a2:	55 97       	sbiw	r26, 0x15	; 21
 3a4:	f9 01       	movw	r30, r18
 3a6:	b1 83       	std	Z+1, r27	; 0x01
 3a8:	a0 83       	st	Z, r26
 3aa:	8c 2f       	mov	r24, r28
 3ac:	2a df       	rcall	.-428    	; 0x202 <bit2mask8>
 3ae:	dd 23       	and	r29, r29
 3b0:	41 f0       	breq	.+16     	; 0x3c2 <x_new+0x50>
 3b2:	98 2f       	mov	r25, r24
 3b4:	90 95       	com	r25
 3b6:	80 91 57 0a 	lds	r24, 0x0A57	; 0x800a57 <x_disable_status>
 3ba:	98 23       	and	r25, r24
 3bc:	90 93 57 0a 	sts	0x0A57, r25	; 0x800a57 <x_disable_status>
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <x_new+0x5a>
 3c2:	90 91 57 0a 	lds	r25, 0x0A57	; 0x800a57 <x_disable_status>
 3c6:	98 2b       	or	r25, r24
 3c8:	90 93 57 0a 	sts	0x0A57, r25	; 0x800a57 <x_disable_status>
 3cc:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <x_thread_id>
 3d0:	c8 13       	cpse	r28, r24
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <x_new+0x64>
 3d4:	d7 de       	rcall	.-594    	; 0x184 <x_schedule>
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <init_System_Timer>:
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	84 bd       	out	0x24, r24	; 36
 3e0:	9a ef       	ldi	r25, 0xFA	; 250
 3e2:	97 bd       	out	0x27, r25	; 39
 3e4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	85 bd       	out	0x25, r24	; 37
 3ec:	08 95       	ret

000003ee <x_init>:
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	f8 94       	cli
 3f4:	8e ef       	ldi	r24, 0xFE	; 254
 3f6:	80 93 57 0a 	sts	0x0A57, r24	; 0x800a57 <x_disable_status>
 3fa:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <x_suspend_status>
 3fe:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <x_delay_status>
 402:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <x_thread_id>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 58 0a 	sts	0x0A58, r24	; 0x800a58 <x_thread_mask>
 40c:	c6 e2       	ldi	r28, 0x26	; 38
 40e:	d2 e0       	ldi	r29, 0x02	; 2
 410:	86 e4       	ldi	r24, 0x46	; 70
 412:	93 e0       	ldi	r25, 0x03	; 3
 414:	99 83       	std	Y+1, r25	; 0x01
 416:	88 83       	st	Y, r24
 418:	9b 83       	std	Y+3, r25	; 0x03
 41a:	8a 83       	std	Y+2, r24	; 0x02
 41c:	86 e4       	ldi	r24, 0x46	; 70
 41e:	94 e0       	ldi	r25, 0x04	; 4
 420:	9d 83       	std	Y+5, r25	; 0x05
 422:	8c 83       	std	Y+4, r24	; 0x04
 424:	9f 83       	std	Y+7, r25	; 0x07
 426:	8e 83       	std	Y+6, r24	; 0x06
 428:	86 e4       	ldi	r24, 0x46	; 70
 42a:	95 e0       	ldi	r25, 0x05	; 5
 42c:	99 87       	std	Y+9, r25	; 0x09
 42e:	88 87       	std	Y+8, r24	; 0x08
 430:	9b 87       	std	Y+11, r25	; 0x0b
 432:	8a 87       	std	Y+10, r24	; 0x0a
 434:	86 e4       	ldi	r24, 0x46	; 70
 436:	96 e0       	ldi	r25, 0x06	; 6
 438:	9d 87       	std	Y+13, r25	; 0x0d
 43a:	8c 87       	std	Y+12, r24	; 0x0c
 43c:	9f 87       	std	Y+15, r25	; 0x0f
 43e:	8e 87       	std	Y+14, r24	; 0x0e
 440:	86 e4       	ldi	r24, 0x46	; 70
 442:	97 e0       	ldi	r25, 0x07	; 7
 444:	99 8b       	std	Y+17, r25	; 0x11
 446:	88 8b       	std	Y+16, r24	; 0x10
 448:	9b 8b       	std	Y+19, r25	; 0x13
 44a:	8a 8b       	std	Y+18, r24	; 0x12
 44c:	86 e4       	ldi	r24, 0x46	; 70
 44e:	98 e0       	ldi	r25, 0x08	; 8
 450:	9d 8b       	std	Y+21, r25	; 0x15
 452:	8c 8b       	std	Y+20, r24	; 0x14
 454:	9f 8b       	std	Y+23, r25	; 0x17
 456:	8e 8b       	std	Y+22, r24	; 0x16
 458:	86 e4       	ldi	r24, 0x46	; 70
 45a:	99 e0       	ldi	r25, 0x09	; 9
 45c:	99 8f       	std	Y+25, r25	; 0x19
 45e:	88 8f       	std	Y+24, r24	; 0x18
 460:	9b 8f       	std	Y+27, r25	; 0x1b
 462:	8a 8f       	std	Y+26, r24	; 0x1a
 464:	86 e4       	ldi	r24, 0x46	; 70
 466:	9a e0       	ldi	r25, 0x0A	; 10
 468:	9d 8f       	std	Y+29, r25	; 0x1d
 46a:	8c 8f       	std	Y+28, r24	; 0x1c
 46c:	9f 8f       	std	Y+31, r25	; 0x1f
 46e:	8e 8f       	std	Y+30, r24	; 0x1e
 470:	8a ea       	ldi	r24, 0xAA	; 170
 472:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <x_thread_stacks>
 476:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <x_thread_stacks+0x100>
 47a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <x_thread_stacks+0x200>
 47e:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <x_thread_stacks+0x300>
 482:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <x_thread_stacks+0x400>
 486:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <x_thread_stacks+0x500>
 48a:	80 93 47 08 	sts	0x0847, r24	; 0x800847 <x_thread_stacks+0x600>
 48e:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <x_thread_stacks+0x700>
 492:	a4 df       	rcall	.-184    	; 0x3dc <init_System_Timer>
 494:	ed b7       	in	r30, 0x3d	; 61
 496:	fe b7       	in	r31, 0x3e	; 62
 498:	a8 81       	ld	r26, Y
 49a:	b9 81       	ldd	r27, Y+1	; 0x01
 49c:	85 81       	ldd	r24, Z+5	; 0x05
 49e:	8c 93       	st	X, r24
 4a0:	a8 81       	ld	r26, Y
 4a2:	b9 81       	ldd	r27, Y+1	; 0x01
 4a4:	84 81       	ldd	r24, Z+4	; 0x04
 4a6:	11 97       	sbiw	r26, 0x01	; 1
 4a8:	8c 93       	st	X, r24
 4aa:	a8 81       	ld	r26, Y
 4ac:	b9 81       	ldd	r27, Y+1	; 0x01
 4ae:	83 81       	ldd	r24, Z+3	; 0x03
 4b0:	12 97       	sbiw	r26, 0x02	; 2
 4b2:	8c 93       	st	X, r24
 4b4:	a8 81       	ld	r26, Y
 4b6:	b9 81       	ldd	r27, Y+1	; 0x01
 4b8:	82 81       	ldd	r24, Z+2	; 0x02
 4ba:	13 97       	sbiw	r26, 0x03	; 3
 4bc:	8c 93       	st	X, r24
 4be:	88 81       	ld	r24, Y
 4c0:	99 81       	ldd	r25, Y+1	; 0x01
 4c2:	21 81       	ldd	r18, Z+1	; 0x01
 4c4:	fc 01       	movw	r30, r24
 4c6:	34 97       	sbiw	r30, 0x04	; 4
 4c8:	20 83       	st	Z, r18
 4ca:	88 81       	ld	r24, Y
 4cc:	99 81       	ldd	r25, Y+1	; 0x01
 4ce:	05 97       	sbiw	r24, 0x05	; 5
 4d0:	9e bf       	out	0x3e, r25	; 62
 4d2:	8d bf       	out	0x3d, r24	; 61
 4d4:	78 94       	sei
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <x_delay>:
 4dc:	9c 01       	movw	r18, r24
 4de:	9f b7       	in	r25, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <x_thread_id>
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	ee 0f       	add	r30, r30
 4ea:	ff 1f       	adc	r31, r31
 4ec:	e9 5b       	subi	r30, 0xB9	; 185
 4ee:	f5 4f       	sbci	r31, 0xF5	; 245
 4f0:	31 83       	std	Z+1, r19	; 0x01
 4f2:	20 83       	st	Z, r18
 4f4:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <x_delay_status>
 4f8:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <x_thread_mask>
 4fc:	82 2b       	or	r24, r18
 4fe:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <x_delay_status>
 502:	9f bf       	out	0x3f, r25	; 63
 504:	0f ce       	rjmp	.-994    	; 0x124 <x_yield>
 506:	08 95       	ret

00000508 <__vector_21>:
 508:	1f 92       	push	r1
 50a:	0f 92       	push	r0
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	0f 92       	push	r0
 510:	11 24       	eor	r1, r1
 512:	0b b6       	in	r0, 0x3b	; 59
 514:	0f 92       	push	r0
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	8f 93       	push	r24
 520:	9f 93       	push	r25
 522:	af 93       	push	r26
 524:	bf 93       	push	r27
 526:	ef 93       	push	r30
 528:	ff 93       	push	r31
 52a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 52e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x1>
 532:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <__data_end+0x2>
 536:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <__data_end+0x3>
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	a1 1d       	adc	r26, r1
 53e:	b1 1d       	adc	r27, r1
 540:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
 544:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__data_end+0x1>
 548:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <__data_end+0x2>
 54c:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <__data_end+0x3>
 550:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <x_delay_status>
 554:	e7 e4       	ldi	r30, 0x47	; 71
 556:	fa e0       	ldi	r31, 0x0A	; 10
 558:	47 e5       	ldi	r20, 0x57	; 87
 55a:	5a e0       	ldi	r21, 0x0A	; 10
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	80 81       	ld	r24, Z
 560:	91 81       	ldd	r25, Z+1	; 0x01
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	81 93       	st	Z+, r24
 566:	91 93       	st	Z+, r25
 568:	89 2b       	or	r24, r25
 56a:	19 f4       	brne	.+6      	; 0x572 <__vector_21+0x6a>
 56c:	82 2f       	mov	r24, r18
 56e:	80 95       	com	r24
 570:	38 23       	and	r19, r24
 572:	22 0f       	add	r18, r18
 574:	e4 17       	cp	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	91 f7       	brne	.-28     	; 0x55e <__vector_21+0x56>
 57a:	30 93 25 02 	sts	0x0225, r19	; 0x800225 <x_delay_status>
 57e:	ff 91       	pop	r31
 580:	ef 91       	pop	r30
 582:	bf 91       	pop	r27
 584:	af 91       	pop	r26
 586:	9f 91       	pop	r25
 588:	8f 91       	pop	r24
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0b be       	out	0x3b, r0	; 59
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <x_suspend>:
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <x_suspend+0xa>
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	8a 95       	dec	r24
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <x_suspend+0x6>
 5ae:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <x_suspend_status>
 5b2:	28 2b       	or	r18, r24
 5b4:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <x_suspend_status>
 5b8:	08 95       	ret

000005ba <x_stack_overflow>:
 5ba:	ac 01       	movw	r20, r24
 5bc:	27 9a       	sbi	0x04, 7	; 4
 5be:	2f 98       	cbi	0x05, 7	; 5
   must be defined before including this header file. Also, the
   backward compatible algorithm will be chosen if the code is
   compiled in a <em>freestanding environment</em> (GCC option
   \c -ffreestanding), as the math functions required for rounding are
   not available to the compiler then.

 5c0:	2f ef       	ldi	r18, 0xFF	; 255
 5c2:	31 ee       	ldi	r19, 0xE1	; 225
 5c4:	74 e0       	ldi	r23, 0x04	; 4
 5c6:	21 50       	subi	r18, 0x01	; 1
 5c8:	30 40       	sbci	r19, 0x00	; 0
 5ca:	70 40       	sbci	r23, 0x00	; 0
 5cc:	e1 f7       	brne	.-8      	; 0x5c6 <x_stack_overflow+0xc>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <x_stack_overflow+0x16>
 5d0:	00 00       	nop
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	55 23       	and	r21, r21
 5d8:	fc f0       	brlt	.+62     	; 0x618 <x_stack_overflow+0x5e>
 5da:	26 2f       	mov	r18, r22
 5dc:	38 2f       	mov	r19, r24
 5de:	95 b1       	in	r25, 0x05	; 5
 5e0:	90 58       	subi	r25, 0x80	; 128
 5e2:	95 b9       	out	0x05, r25	; 5
 5e4:	9f ef       	ldi	r25, 0xFF	; 255
 5e6:	e0 e7       	ldi	r30, 0x70	; 112
 5e8:	72 e0       	ldi	r23, 0x02	; 2
 5ea:	91 50       	subi	r25, 0x01	; 1
 5ec:	e0 40       	sbci	r30, 0x00	; 0
 5ee:	70 40       	sbci	r23, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <x_stack_overflow+0x30>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <x_stack_overflow+0x3a>
 5f4:	00 00       	nop
 5f6:	95 b1       	in	r25, 0x05	; 5
 5f8:	90 58       	subi	r25, 0x80	; 128
 5fa:	95 b9       	out	0x05, r25	; 5
 5fc:	9f ef       	ldi	r25, 0xFF	; 255
 5fe:	e9 e6       	ldi	r30, 0x69	; 105
 600:	78 e1       	ldi	r23, 0x18	; 24
 602:	91 50       	subi	r25, 0x01	; 1
 604:	e0 40       	sbci	r30, 0x00	; 0
 606:	70 40       	sbci	r23, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <x_stack_overflow+0x48>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <x_stack_overflow+0x52>
 60c:	00 00       	nop
 60e:	2f 5f       	subi	r18, 0xFF	; 255
 610:	3f 4f       	sbci	r19, 0xFF	; 255
 612:	42 17       	cp	r20, r18
 614:	53 07       	cpc	r21, r19
 616:	1c f7       	brge	.-58     	; 0x5de <x_stack_overflow+0x24>
 618:	9f ef       	ldi	r25, 0xFF	; 255
 61a:	e3 e2       	ldi	r30, 0x23	; 35
 61c:	24 ef       	ldi	r18, 0xF4	; 244
 61e:	91 50       	subi	r25, 0x01	; 1
 620:	e0 40       	sbci	r30, 0x00	; 0
 622:	20 40       	sbci	r18, 0x00	; 0
 624:	e1 f7       	brne	.-8      	; 0x61e <x_stack_overflow+0x64>
 626:	00 c0       	rjmp	.+0      	; 0x628 <x_stack_overflow+0x6e>
 628:	00 00       	nop
 62a:	d5 cf       	rjmp	.-86     	; 0x5d6 <x_stack_overflow+0x1c>

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
